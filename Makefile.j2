MAKEFLAGS 				+=	--warn-undefined-variables
SHELL 					:=	bash
.DEFAULT_GOAL			:=	help
URIBASE					:=	http://purl.obolibrary.org/obo
TMP_DATA				:=	data/tmp
MIRRORDIR				:=	data/mirror
ONTOLOGYDIR				:=	data/ontology
MIR						:=	true
ROBOT					:=  robot

$(MIRRORDIR)/%.owl: mirror-%
	if [ $(MIR) = true ] && [ -f $(TMP_DATA)/mirror-$*.owl ]; then mkdir -p $(MIRRORDIR) && if cmp -s $(TMP_DATA)/mirror-$*.owl $@ ; then echo "Mirror identical, ignoring."; else echo "Mirrors different, updating." &&\
		cp $(TMP_DATA)/mirror-$*.owl $@; fi; fi
.PRECIOUS: $(MIRRORDIR)/%.owl

.PHONY: generate-ontologies

$(ONTOLOGYDIR)/%.owl: $(MIRRORDIR)/%.owl
	test -d $(ONTOLOGYDIR) || mkdir -p $(ONTOLOGYDIR)
	cp $< $@

{%- for ontology in ontologies %}
generate-ontologies: $(ONTOLOGYDIR)/{{ ontology.id }}.owl

mirror-{{ ontology.id }}:
	mkdir -p $(TMP_DATA)
	if [ $(MIR) = true ]; then curl -L {{ ontology.mirror_from }} --create-dirs -o $(ONTOLOGYDIR)/{{ ontology.id }}-download.owl  --max-time 600 &&\
		$(ROBOT) merge -i $(ONTOLOGYDIR)/{{ ontology.id }}-download.owl convert -o $@.tmp.owl && mv $@.tmp.owl $(TMP_DATA)/$@.owl; fi

{% if 'parent_term' in ontology -%}


$(TMP_DATA)/{{ ontology.id }}_terms.txt: $(ONTOLOGYDIR)/{{ ontology.id }}.owl
	runoak -i sqlite:$< descendants -p i {{ ontology.parent_term }} -o $@

{% endif %}

generate-ontologies: $(ONTOLOGYDIR)/{{ ontology.id }}.db

$(ONTOLOGYDIR)/{{ ontology.id }}.db: $(ONTOLOGYDIR)/{{ ontology.id }}.owl
	semsql make $@


#4
generate-ontologies: $(ONTOLOGYDIR)/{{ ontology.id }}_flat.owl

#4
# Maybe it's better to just create an empty semsim table rather than doing this unecessary computation
$(ONTOLOGYDIR)/{{ ontology.id }}_flat.owl: $(ONTOLOGYDIR)/{{ ontology.id }}.owl
	$(ROBOT) remove --axioms "logical" --input $< --output $@

{% endfor %}

.PHONY: run-semsim

run-semsim: generate-ontologies

{% for semsim in semantic_similarity_profiles %}
{% if 'prefixes' in semsim -%}

run-semsim: {{ directories.profiles }}/{{ semsim.ontology }}-{{ semsim.subset }}.{{semsim.threshold}}.{{ semsim.method }}.tsv

{{ directories.profiles }}/{{ semsim.ontology }}-{{ semsim.subset }}.{{semsim.threshold}}.{{ semsim.method }}.tsv: $(ONTOLOGYDIR)/{{ semsim.ontology }}.db $(TMP_DATA)/{{ semsim.prefixes.subject }}_terms.txt $(TMP_DATA)/{{ semsim.prefixes.object }}_terms.txt
	test -d {{ directories.profiles }} || mkdir -p {{ directories.profiles }}
	runoak --stacktrace -vvv  -i {{ semsim.method }}:sqlite:$< similarity -p i \
	--set1-file $(TMP_DATA)/{{ semsim.prefixes.subject }}_terms.txt \
	--set2-file $(TMP_DATA)/{{ semsim.prefixes.object }}_terms.txt \
 	--min-jaccard-similarity {{semsim.threshold}} \
	--autolabel \
	-O csv \
	-o $@


{% endif %}
{% endfor %}

.PHONY: generate-mappings
{%- for mapping in mappings %}
generate-mappings: $(TMP_DATA)/{{ mapping.id }}-lexmatch.sssom.tsv
{% endfor %}

### 2.2
$(TMP_DATA)/%-lexmatch.sssom.tsv: $(ONTOLOGYDIR)/%.owl
	runoak -i $< lexmatch -o $@


# Obtain lexmatch results then combine to upheno2

### 3

upheno1-equivalent-inferred.owl: $(ONTOLOGYDIR)/upheno1-equivalent.owl
	$(ROBOT) merge -i $< reason --reasoner ELK --axiom-generators "EquivalentClass" -o $@

generate-ontologies: upheno1-equivalent-inferred.owl


.PHONY: public_release
public_release:
	gsutil rsync -d profiles/ gs://data-public-monarchinitiative/semantic-similarity/$(shell date +%Y-%m-%d)
	gsutil -m rm -r gs://data-public-monarchinitiative/semantic-similarity/latest/*
	gsutil cp -r gs://data-public-monarchinitiative/semantic-similarity/$(shell date +%Y-%m-%d) gs://data-public-monarchinitiative/semantic-similarity/latest


.PHONY: install

install:
	pip install oaklib -U
	pip install semsimian -U

include ./custom.Makefile