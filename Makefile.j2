MAKEFLAGS 				+=	--warn-undefined-variables
SHELL 					:=	bash
.DEFAULT_GOAL			:=	help
URIBASE					:=	http://purl.obolibrary.org/obo
TMP_DATA				:=	data/tmp
MIRRORDIR				:=	data/mirror
ONTOLOGYDIR				:=	data/ontology
MIR						:=	true
ROBOT					:=  robot

$(MIRRORDIR)/%.owl: mirror-%
	test -d $(MIRRORDIR) || mkdir -p $(MIRRORDIR)
	if [ $(MIR) = true ] && [ -f $(TMP_DATA)/mirror-$*.owl ]; then mkdir -p $(MIRRORDIR) && if cmp -s $(TMP_DATA)/mirror-$*.owl $@ ; then echo "Mirror identical, ignoring."; else echo "Mirrors different, updating." &&\
		cp $(TMP_DATA)/mirror-$*.owl $@; fi; fi
.PRECIOUS: $(MIRRORDIR)/%.owl

.PHONY: generate-ontologies

$(ONTOLOGYDIR)/%.owl: $(MIRRORDIR)/%.owl
	test -d $(ONTOLOGYDIR) || mkdir -p $(ONTOLOGYDIR)
	cp $< $@

%.db: %.owl
	@rm -f $*.db
	@rm -f .template.db
	@rm -f .template.db.tmp
	@rm -f $*-relation-graph.tsv.gz
	RUST_BACKTRACE=full semsql make $*.db -P config/prefixes.csv
	@rm -f .template.db
	@rm -f .template.db.tmp
	@rm -f $*-relation-graph.tsv.gz
	@test -f $*.db || (echo "Error: File not found!" && exit 1)

.PRECIOUS: %.db

###############################################################
## General rules for generating semantic similarity profiles ##
###############################################################

{%- for ontology in ontologies %}
generate-ontologies: $(ONTOLOGYDIR)/{{ ontology.id }}.owl $(ONTOLOGYDIR)/{{ ontology.id }}.db

{% if 'mirror_from' in ontology -%}
mirror-{{ ontology.id }}:
	mkdir -p $(TMP_DATA)
	if [ $(MIR) = true ]; then curl -L {{ ontology.mirror_from }} --create-dirs -o $(TMP_DATA)/{{ ontology.id }}-download.owl  --max-time 600 &&\
		$(ROBOT) merge -i $(TMP_DATA)/{{ ontology.id }}-download.owl convert -o $@.tmp.owl && mv $@.tmp.owl $(TMP_DATA)/$@.owl; fi
{% endif %}

{% if 'parent_term' in ontology -%}

$(TMP_DATA)/{{ ontology.id }}_terms.txt: $(ONTOLOGYDIR)/{{ ontology.id }}.db
	runoak -i sqlite:$< descendants -p i {{ ontology.parent_term }} -o $@

{% endif -%}
{% endfor -%}


###############################################################
## General rules for generating semantic similarity profiles ##
###############################################################

run-semsim: generate-ontologies
.PHONY: run-semsim

{{ directories.profiles }}/%.gz: {{ directories.profiles }}/%.tsv
	gzip -c $< > $@.tmp && mv $@.tmp $@

{% for semsim in semantic_similarity_profiles %}

{% if 'custom' in semsim.method -%}

{{ directories.profiles }}/{{ semsim.ontology }}-{{ semsim.subset }}.{{semsim.threshold}}.{{ semsim.method }}.tsv:
	echo "$@ has to be manually configured"
	false

{% else -%}

{% if 'prefixes' in semsim -%}

run-semsim: {{ directories.profiles }}/{{ semsim.ontology }}-{{ semsim.subset }}.{{semsim.threshold}}.{{ semsim.method }}.tsv



{% if 'ic' in semsim -%}



{{ directories.profiles }}/{{ semsim.ontology }}-{{ semsim.subset }}.{{semsim.threshold}}.{{ semsim.method }}.ic.tsv: $(ONTOLOGYDIR)/{{ semsim.ontology }}.db $(TMP_DATA)/{{ semsim.prefixes.subject }}_terms.txt $(TMP_DATA)/{{ semsim.prefixes.object }}_terms.txt $(TMP_DATA)/{{ semsim.ic }}
	test -d {{ directories.profiles }} || mkdir -p {{ directories.profiles }}
	runoak --stacktrace -vvv  -i {{ semsim.method }}:sqlite:$< similarity -p i \
	--set1-file $(TMP_DATA)/{{ semsim.prefixes.subject }}_terms.txt \
	--set2-file $(TMP_DATA)/{{ semsim.prefixes.object }}_terms.txt \
 	--min-jaccard-similarity {{ semsim.threshold }} \
	--information-content-file  $(TMP_DATA)/{{ semsim.ic }} \
	-O csv \
	-o $@

{% else -%}


{{ directories.profiles }}/{{ semsim.ontology }}-{{ semsim.subset }}.{{semsim.threshold}}.{{ semsim.method }}.tsv: $(ONTOLOGYDIR)/{{ semsim.ontology }}.db $(TMP_DATA)/{{ semsim.prefixes.subject }}_terms.txt $(TMP_DATA)/{{ semsim.prefixes.object }}_terms.txt
	test -d {{ directories.profiles }} || mkdir -p {{ directories.profiles }}
	runoak --stacktrace -vvv  -i {{ semsim.method }}:sqlite:$< similarity -p i \
	--set1-file $(TMP_DATA)/{{ semsim.prefixes.subject }}_terms.txt \
	--set2-file $(TMP_DATA)/{{ semsim.prefixes.object }}_terms.txt \
 	--min-jaccard-similarity {{semsim.threshold}} \
	-O csv \
	-o $@


{% endif %}

{% endif %}

{% endif %}  # endif method

{% endfor %}

.PHONY: upgrade
upgrade:
	echo "Upgrading dependencies, only use this if absolutely necessary"
	pip install oaklib -U
	pip install semsimian -U

include ./custom.Makefile